// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	layeradder "code.cloudfoundry.org/hydrator/layeradder"
	digest "github.com/opencontainers/go-digest"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
)

type OCIDirectory struct {
	AddBlobStub        func(string, v1.Descriptor) error
	addBlobMutex       sync.RWMutex
	addBlobArgsForCall []struct {
		arg1 string
		arg2 v1.Descriptor
	}
	addBlobReturns struct {
		result1 error
	}
	addBlobReturnsOnCall map[int]struct {
		result1 error
	}
	ClearMetadataStub        func() error
	clearMetadataMutex       sync.RWMutex
	clearMetadataArgsForCall []struct {
	}
	clearMetadataReturns struct {
		result1 error
	}
	clearMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	ReadMetadataStub        func() (v1.Manifest, v1.Image, error)
	readMetadataMutex       sync.RWMutex
	readMetadataArgsForCall []struct {
	}
	readMetadataReturns struct {
		result1 v1.Manifest
		result2 v1.Image
		result3 error
	}
	readMetadataReturnsOnCall map[int]struct {
		result1 v1.Manifest
		result2 v1.Image
		result3 error
	}
	WriteMetadataStub        func([]v1.Descriptor, []digest.Digest) error
	writeMetadataMutex       sync.RWMutex
	writeMetadataArgsForCall []struct {
		arg1 []v1.Descriptor
		arg2 []digest.Digest
	}
	writeMetadataReturns struct {
		result1 error
	}
	writeMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OCIDirectory) AddBlob(arg1 string, arg2 v1.Descriptor) error {
	fake.addBlobMutex.Lock()
	ret, specificReturn := fake.addBlobReturnsOnCall[len(fake.addBlobArgsForCall)]
	fake.addBlobArgsForCall = append(fake.addBlobArgsForCall, struct {
		arg1 string
		arg2 v1.Descriptor
	}{arg1, arg2})
	fake.recordInvocation("AddBlob", []interface{}{arg1, arg2})
	fake.addBlobMutex.Unlock()
	if fake.AddBlobStub != nil {
		return fake.AddBlobStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addBlobReturns
	return fakeReturns.result1
}

func (fake *OCIDirectory) AddBlobCallCount() int {
	fake.addBlobMutex.RLock()
	defer fake.addBlobMutex.RUnlock()
	return len(fake.addBlobArgsForCall)
}

func (fake *OCIDirectory) AddBlobCalls(stub func(string, v1.Descriptor) error) {
	fake.addBlobMutex.Lock()
	defer fake.addBlobMutex.Unlock()
	fake.AddBlobStub = stub
}

func (fake *OCIDirectory) AddBlobArgsForCall(i int) (string, v1.Descriptor) {
	fake.addBlobMutex.RLock()
	defer fake.addBlobMutex.RUnlock()
	argsForCall := fake.addBlobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *OCIDirectory) AddBlobReturns(result1 error) {
	fake.addBlobMutex.Lock()
	defer fake.addBlobMutex.Unlock()
	fake.AddBlobStub = nil
	fake.addBlobReturns = struct {
		result1 error
	}{result1}
}

func (fake *OCIDirectory) AddBlobReturnsOnCall(i int, result1 error) {
	fake.addBlobMutex.Lock()
	defer fake.addBlobMutex.Unlock()
	fake.AddBlobStub = nil
	if fake.addBlobReturnsOnCall == nil {
		fake.addBlobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addBlobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OCIDirectory) ClearMetadata() error {
	fake.clearMetadataMutex.Lock()
	ret, specificReturn := fake.clearMetadataReturnsOnCall[len(fake.clearMetadataArgsForCall)]
	fake.clearMetadataArgsForCall = append(fake.clearMetadataArgsForCall, struct {
	}{})
	fake.recordInvocation("ClearMetadata", []interface{}{})
	fake.clearMetadataMutex.Unlock()
	if fake.ClearMetadataStub != nil {
		return fake.ClearMetadataStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clearMetadataReturns
	return fakeReturns.result1
}

func (fake *OCIDirectory) ClearMetadataCallCount() int {
	fake.clearMetadataMutex.RLock()
	defer fake.clearMetadataMutex.RUnlock()
	return len(fake.clearMetadataArgsForCall)
}

func (fake *OCIDirectory) ClearMetadataCalls(stub func() error) {
	fake.clearMetadataMutex.Lock()
	defer fake.clearMetadataMutex.Unlock()
	fake.ClearMetadataStub = stub
}

func (fake *OCIDirectory) ClearMetadataReturns(result1 error) {
	fake.clearMetadataMutex.Lock()
	defer fake.clearMetadataMutex.Unlock()
	fake.ClearMetadataStub = nil
	fake.clearMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *OCIDirectory) ClearMetadataReturnsOnCall(i int, result1 error) {
	fake.clearMetadataMutex.Lock()
	defer fake.clearMetadataMutex.Unlock()
	fake.ClearMetadataStub = nil
	if fake.clearMetadataReturnsOnCall == nil {
		fake.clearMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OCIDirectory) ReadMetadata() (v1.Manifest, v1.Image, error) {
	fake.readMetadataMutex.Lock()
	ret, specificReturn := fake.readMetadataReturnsOnCall[len(fake.readMetadataArgsForCall)]
	fake.readMetadataArgsForCall = append(fake.readMetadataArgsForCall, struct {
	}{})
	fake.recordInvocation("ReadMetadata", []interface{}{})
	fake.readMetadataMutex.Unlock()
	if fake.ReadMetadataStub != nil {
		return fake.ReadMetadataStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.readMetadataReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *OCIDirectory) ReadMetadataCallCount() int {
	fake.readMetadataMutex.RLock()
	defer fake.readMetadataMutex.RUnlock()
	return len(fake.readMetadataArgsForCall)
}

func (fake *OCIDirectory) ReadMetadataCalls(stub func() (v1.Manifest, v1.Image, error)) {
	fake.readMetadataMutex.Lock()
	defer fake.readMetadataMutex.Unlock()
	fake.ReadMetadataStub = stub
}

func (fake *OCIDirectory) ReadMetadataReturns(result1 v1.Manifest, result2 v1.Image, result3 error) {
	fake.readMetadataMutex.Lock()
	defer fake.readMetadataMutex.Unlock()
	fake.ReadMetadataStub = nil
	fake.readMetadataReturns = struct {
		result1 v1.Manifest
		result2 v1.Image
		result3 error
	}{result1, result2, result3}
}

func (fake *OCIDirectory) ReadMetadataReturnsOnCall(i int, result1 v1.Manifest, result2 v1.Image, result3 error) {
	fake.readMetadataMutex.Lock()
	defer fake.readMetadataMutex.Unlock()
	fake.ReadMetadataStub = nil
	if fake.readMetadataReturnsOnCall == nil {
		fake.readMetadataReturnsOnCall = make(map[int]struct {
			result1 v1.Manifest
			result2 v1.Image
			result3 error
		})
	}
	fake.readMetadataReturnsOnCall[i] = struct {
		result1 v1.Manifest
		result2 v1.Image
		result3 error
	}{result1, result2, result3}
}

func (fake *OCIDirectory) WriteMetadata(arg1 []v1.Descriptor, arg2 []digest.Digest) error {
	var arg1Copy []v1.Descriptor
	if arg1 != nil {
		arg1Copy = make([]v1.Descriptor, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []digest.Digest
	if arg2 != nil {
		arg2Copy = make([]digest.Digest, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeMetadataMutex.Lock()
	ret, specificReturn := fake.writeMetadataReturnsOnCall[len(fake.writeMetadataArgsForCall)]
	fake.writeMetadataArgsForCall = append(fake.writeMetadataArgsForCall, struct {
		arg1 []v1.Descriptor
		arg2 []digest.Digest
	}{arg1Copy, arg2Copy})
	fake.recordInvocation("WriteMetadata", []interface{}{arg1Copy, arg2Copy})
	fake.writeMetadataMutex.Unlock()
	if fake.WriteMetadataStub != nil {
		return fake.WriteMetadataStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeMetadataReturns
	return fakeReturns.result1
}

func (fake *OCIDirectory) WriteMetadataCallCount() int {
	fake.writeMetadataMutex.RLock()
	defer fake.writeMetadataMutex.RUnlock()
	return len(fake.writeMetadataArgsForCall)
}

func (fake *OCIDirectory) WriteMetadataCalls(stub func([]v1.Descriptor, []digest.Digest) error) {
	fake.writeMetadataMutex.Lock()
	defer fake.writeMetadataMutex.Unlock()
	fake.WriteMetadataStub = stub
}

func (fake *OCIDirectory) WriteMetadataArgsForCall(i int) ([]v1.Descriptor, []digest.Digest) {
	fake.writeMetadataMutex.RLock()
	defer fake.writeMetadataMutex.RUnlock()
	argsForCall := fake.writeMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *OCIDirectory) WriteMetadataReturns(result1 error) {
	fake.writeMetadataMutex.Lock()
	defer fake.writeMetadataMutex.Unlock()
	fake.WriteMetadataStub = nil
	fake.writeMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *OCIDirectory) WriteMetadataReturnsOnCall(i int, result1 error) {
	fake.writeMetadataMutex.Lock()
	defer fake.writeMetadataMutex.Unlock()
	fake.WriteMetadataStub = nil
	if fake.writeMetadataReturnsOnCall == nil {
		fake.writeMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OCIDirectory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addBlobMutex.RLock()
	defer fake.addBlobMutex.RUnlock()
	fake.clearMetadataMutex.RLock()
	defer fake.clearMetadataMutex.RUnlock()
	fake.readMetadataMutex.RLock()
	defer fake.readMetadataMutex.RUnlock()
	fake.writeMetadataMutex.RLock()
	defer fake.writeMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OCIDirectory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ layeradder.OCIDirectory = new(OCIDirectory)
