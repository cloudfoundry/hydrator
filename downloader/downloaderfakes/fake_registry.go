// Code generated by counterfeiter. DO NOT EDIT.
package downloaderfakes

import (
	"sync"

	"code.cloudfoundry.org/windows2016fs/downloader"
	"github.com/opencontainers/image-spec/specs-go/v1"
)

type FakeRegistry struct {
	ManifestStub        func() (v1.Manifest, error)
	manifestMutex       sync.RWMutex
	manifestArgsForCall []struct{}
	manifestReturns     struct {
		result1 v1.Manifest
		result2 error
	}
	manifestReturnsOnCall map[int]struct {
		result1 v1.Manifest
		result2 error
	}
	ConfigStub        func(v1.Descriptor) (v1.Image, error)
	configMutex       sync.RWMutex
	configArgsForCall []struct {
		arg1 v1.Descriptor
	}
	configReturns struct {
		result1 v1.Image
		result2 error
	}
	configReturnsOnCall map[int]struct {
		result1 v1.Image
		result2 error
	}
	DownloadLayerStub        func(v1.Descriptor, string) error
	downloadLayerMutex       sync.RWMutex
	downloadLayerArgsForCall []struct {
		arg1 v1.Descriptor
		arg2 string
	}
	downloadLayerReturns struct {
		result1 error
	}
	downloadLayerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRegistry) Manifest() (v1.Manifest, error) {
	fake.manifestMutex.Lock()
	ret, specificReturn := fake.manifestReturnsOnCall[len(fake.manifestArgsForCall)]
	fake.manifestArgsForCall = append(fake.manifestArgsForCall, struct{}{})
	fake.recordInvocation("Manifest", []interface{}{})
	fake.manifestMutex.Unlock()
	if fake.ManifestStub != nil {
		return fake.ManifestStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.manifestReturns.result1, fake.manifestReturns.result2
}

func (fake *FakeRegistry) ManifestCallCount() int {
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	return len(fake.manifestArgsForCall)
}

func (fake *FakeRegistry) ManifestReturns(result1 v1.Manifest, result2 error) {
	fake.ManifestStub = nil
	fake.manifestReturns = struct {
		result1 v1.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) ManifestReturnsOnCall(i int, result1 v1.Manifest, result2 error) {
	fake.ManifestStub = nil
	if fake.manifestReturnsOnCall == nil {
		fake.manifestReturnsOnCall = make(map[int]struct {
			result1 v1.Manifest
			result2 error
		})
	}
	fake.manifestReturnsOnCall[i] = struct {
		result1 v1.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) Config(arg1 v1.Descriptor) (v1.Image, error) {
	fake.configMutex.Lock()
	ret, specificReturn := fake.configReturnsOnCall[len(fake.configArgsForCall)]
	fake.configArgsForCall = append(fake.configArgsForCall, struct {
		arg1 v1.Descriptor
	}{arg1})
	fake.recordInvocation("Config", []interface{}{arg1})
	fake.configMutex.Unlock()
	if fake.ConfigStub != nil {
		return fake.ConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.configReturns.result1, fake.configReturns.result2
}

func (fake *FakeRegistry) ConfigCallCount() int {
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return len(fake.configArgsForCall)
}

func (fake *FakeRegistry) ConfigArgsForCall(i int) v1.Descriptor {
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	return fake.configArgsForCall[i].arg1
}

func (fake *FakeRegistry) ConfigReturns(result1 v1.Image, result2 error) {
	fake.ConfigStub = nil
	fake.configReturns = struct {
		result1 v1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) ConfigReturnsOnCall(i int, result1 v1.Image, result2 error) {
	fake.ConfigStub = nil
	if fake.configReturnsOnCall == nil {
		fake.configReturnsOnCall = make(map[int]struct {
			result1 v1.Image
			result2 error
		})
	}
	fake.configReturnsOnCall[i] = struct {
		result1 v1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistry) DownloadLayer(arg1 v1.Descriptor, arg2 string) error {
	fake.downloadLayerMutex.Lock()
	ret, specificReturn := fake.downloadLayerReturnsOnCall[len(fake.downloadLayerArgsForCall)]
	fake.downloadLayerArgsForCall = append(fake.downloadLayerArgsForCall, struct {
		arg1 v1.Descriptor
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DownloadLayer", []interface{}{arg1, arg2})
	fake.downloadLayerMutex.Unlock()
	if fake.DownloadLayerStub != nil {
		return fake.DownloadLayerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.downloadLayerReturns.result1
}

func (fake *FakeRegistry) DownloadLayerCallCount() int {
	fake.downloadLayerMutex.RLock()
	defer fake.downloadLayerMutex.RUnlock()
	return len(fake.downloadLayerArgsForCall)
}

func (fake *FakeRegistry) DownloadLayerArgsForCall(i int) (v1.Descriptor, string) {
	fake.downloadLayerMutex.RLock()
	defer fake.downloadLayerMutex.RUnlock()
	return fake.downloadLayerArgsForCall[i].arg1, fake.downloadLayerArgsForCall[i].arg2
}

func (fake *FakeRegistry) DownloadLayerReturns(result1 error) {
	fake.DownloadLayerStub = nil
	fake.downloadLayerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistry) DownloadLayerReturnsOnCall(i int, result1 error) {
	fake.DownloadLayerStub = nil
	if fake.downloadLayerReturnsOnCall == nil {
		fake.downloadLayerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadLayerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.manifestMutex.RLock()
	defer fake.manifestMutex.RUnlock()
	fake.configMutex.RLock()
	defer fake.configMutex.RUnlock()
	fake.downloadLayerMutex.RLock()
	defer fake.downloadLayerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRegistry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ downloader.Registry = new(FakeRegistry)
